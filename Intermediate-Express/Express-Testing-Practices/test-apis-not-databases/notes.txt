TEST APIS NOT DATABASES

A better way to test 
- Instead of testing the database, test the API 
- Stay consistent with what you are testing

Seeing Tests In Action
-----------------------------------------------------------------------------------------------------------------
/** POST /cats - create cat from data; return `{cat : cat}` */

describe('POST /cats', function(){
    test("Creates a new cat", async function(){
        const response = await request(app)
        .post('/cats')
        .send({
            name : "Ezra"
        });
        expect(response.statusCode).toBe(201);
        expect(response.body).toEqual({
            Cat : { name : "Ezra" }
        });
    });
});
-----------------------------------------------------------------------------------------------------------------

Seeing Tests In Action 
- We're not testing if we actually created anything !
- How should we test this ? What do we test ?


One option
-----------------------------------------------------------------------------------------------------------------
/** POST /cats - create a cat from data ; return `{cat : cat}` */

describe('POST /cats', function(){
    test("Creates a new cat", async function(){
        const response = await request(app)
        .post('/cats')
        .send({
            name : "Ezra"
        });
        expect(response.statusCode).toBe(201);
        expect(response.body).toEqual({
            cat : { name : "Ezra" }
        });

        const catsQuery = await db.query("SELECT name FROM cats;")
        expect(catsQuery.rows[0]).toEqual({ name : "Ezra"});
        expect(catsQuery.rows).toHaveLength(1);
    });
});
-----------------------------------------------------------------------------------------------------------------


A better way to test 
-----------------------------------------------------------------------------------------------------------------
/** POST /cats - create a cat from data ; return `{cat : cat}` */

describe('POST /cats', function(){
    test("Creates a new cat", async function(){
        const response = await request(app)
        .post('/cats')
        .send({
            name : "Ezra"
        });
        expect(response.statusCode).toBe(201);
        expect(response.body).toEqual({
            cat : { name : "Ezra" }
        });

        const getCatsResponse = await request(app).get('/cats')
        expect(response.body[0]).toEqual({ name : "Ezra" });
        expect(response.body).toHaveLength(1);
    });
});
-----------------------------------------------------------------------------------------------------------------

Get the result of the POST request by seeing the data from the GET request